/*
    Create by Piyush Sharma on 08th April 2017
    Updated by Piyush Sharma on 09th April 2017
*/

package personalcapital;

import java.util.Arrays;
import java.util.Random;
/*
    The program run simulation based on gaussian distribution and find -- 90th percentile value,
    10th percentile and the median of the distribution.
*/
public class PersonalCapital {
    /*Main function to test the scenarios:
    1) Agressive investments in portfolio with return rate 9.4324 and risk 15.675
    2) Conservative investment in portfolio with return rate 6.189 and risk 6.3438
    */
    public static void main(String[] args){
        // Setting principle amount to be $100,000
        double principle = 100000.0;
        PersonalCapital pc = new PersonalCapital();
        //Getting the 90th percentile, 10th percentile and median for agressive investment.
        double[] aggressive =  pc.generateAvgReturnMinMax(principle,9.4324,15.675);
        
        // Printing the outcome on the console
        System.out.println("90th percentile of agreesive investment: " + aggressive[0]);
        System.out.println("10th percentile of agreesive investment: " + aggressive[1]);
        System.out.println("Median for agreesive: " + aggressive[2]);
        
        //Getting the 90th percentile, 10th percentile and median for conservative investment.
        double[] conservative =  pc.generateAvgReturnMinMax(principle,6.189,6.3438);
        System.out.println("90th percentile of conservative investment: " + conservative[0]);
        System.out.println("10th percentile of conservative investment: " + conservative[1]);
        System.out.println("Median for conservative: " + conservative[2]);        
    }
    
    /* Below function returns the 90th percentile, 10th percentile and the median of the distribution for 
       given principle, return and risk
    */
    public double[] generateAvgReturnMinMax (double principle, double aggMean, double aggStdDev){
        double[] returnVal = new double[3];
        // Assuming that the principle amount cannot be negative to start an investment.
        if (principle <= 0.0){
            Arrays.fill(returnVal, 0.0);
            return returnVal;
        }    
        Random rand = new Random();
        
        // Setting seed value for random number generation
        rand.setSeed(76548989);
        // Initializing array to store values of all the possible outcomes.
        double[] array = new double[10000];
        
        // Counter to check how many time the while loop has been run.
        int count = 0;
        
        // Variable to store the values of the returns based on the Gaussian distribution
        double meanReurn;
        // Variable to store the principle amount generated from each simulation
        double tempPrinciple;
        
        // Loop to run the simulation 10,000 times and store it in an array
        while (count < 10000){
            //Adding risk based on the gaussian distribution to the return
            meanReurn = rand.nextGaussian()*(aggStdDev) + aggMean;
            // Calculating the value after 20 years based on the return rate
            tempPrinciple = principle*Math.pow((1 + (meanReurn/100)), 20.0);
            
            // Storing the amount generated by the simulation in array
            array[count] = Math.round(tempPrinciple*100.0)/100.0;
            
            // Increasing counter for number of times the simulation should run.
            count++;
        }
        
        
        // Sorting array to find the 90th and 10th percentile
        Arrays.sort(array);
        
        // Calculating median for 10000 simulated values.
        returnVal[2] = Math.round(((array[5000] + array[5001])/2)*100.0)/100.0;
        
        // 10th percentile 
        returnVal[0] = array[9000];
        
        // 90th percentile
        returnVal[1] = array[1000];
        
        // Returning array with 10th percentile, 90th percentile and the median
        return returnVal;
    }  
    
}
